(class (Surface width height)
    (set! this.canv (document.createElement "canvas"))
    (set! this.graph (this.canv.getContext "2d"))
    (this.setSize width height)

    (method (setSize width height)
		(set! this.width width)
		(set! this.height height)
        (set! this.canv.width width)
        (set! this.canv.style.width (+ width "px"))
        (set! this.canv.height height)
        (set! this.canv.style.height (+ height "px"))))

(define front (new Surface))
(define back (new Surface))

(document.body.appendChild front.canv)
(define g front.graph)

(define WIDTH 0)
(define HEIGHT 0)
(define MID_WIDTH 0)
(define MID_HEIGHT 0)
(define (setWindowSize)
	(set! WIDTH (- window.innerWidth 5))
	(set! HEIGHT (- window.innerHeight 5))
	(set! MID_WIDTH (* 0.5 WIDTH))
	(set! MID_HEIGHT (* 0.5 HEIGHT))
    (send front setSize WIDTH HEIGHT)
    undefined) 
(setWindowSize)
(on window:resize setWindowSize)


(class (Shape width height pattern)
	(set! this.img (new Surface width height))
	(for (var k in pattern)
		(define parts (k.split " "))
		(define color (parts.pop))
		(define height parts[0])
		(set! height (parseInt (height.substring 0 (- height.length 2)) 10))
		(define font (parts.join " "))
        (set! this.img.graph.font font)
        (set! this.img.graph.fillStyle color)
		(set! parts (pattern[k].split "\n"))
        (for (var i in parts)
            (define y (* height (+ 1 (parseInt i 10))))
			(this.img.graph.fillText parts[i] 0 y)))
    (set! this.midX (* -0.5 width))
    (set! this.midY (* -0.5 height))
    (method (draw)
        (g.drawImage this.img.canv this.midX this.midY)
        undefined))

(class (Animation width height shapes duration runOnce)
    (set! this.shapes [])
    (set! this.width width)
    (set! this.height height)
    (for (var font in shapes)
        (for (var i in shapes[font])
            (define s {})
            (set! s[font] shapes[font][i])
            (this.shapes.push (new Shape width height s))))
    (set! this.loop (not runOnce))
    (set! this.duration duration)
    (set! this.frequency (/ 1 duration))
    (set! this.current 0)

    (method (update dt)
        (set! this.current (+ this.current dt))
        (when (and this.loop (> this.current this.duration))
            (set! this.current (- this.current this.duration)))
        undefined)

    (method (draw)
        (define i (Math.floor (* this.current this.shapes.length this.frequency)))
        (if this.loop
            (set! i (% i this.shapes.length))
            (set! i (Math.min i (- this.shapes.length 1))))
        (this.shapes[i].draw)
        undefined))

(class (BoardObject x y animation)
    (set! this.loc (new Vector x y))
    (set! this.spd (new Vector 0 0))
    (set! this.animation animation)

    (method (update dt)
        (this.animation.update dt)
        (set! this.loc (this.loc.add (this.spd.mul dt))))

    (method (draw)
        (g.save)
        (g.translate this.loc.x this.loc.y)
        (define angle (Math.atan2 this.spd.y this.spd.x))
        (when (< this.spd.x 0)
            (g.scale -1 1)
            (set! angle (- Math.PI angle)))
        (g.rotate angle)
        (this.animation.draw)
        (g.restore)))