(class (Surface width height)
    (set! this.canv (document.createElement "canvas"))
    (set! this.graph (this.canv.getContext "2d"))
    (this.setSize width height)

    (method (setSize width height)
		(set! this.width width)
		(set! this.height height)
        (set! this.canv.width width)
        (set! this.canv.style.width (+ width "px"))
        (set! this.canv.height height)
        (set! this.canv.style.height (+ height "px"))))

(define front (new Surface))
(define back (new Surface))

(document.body.appendChild front.canv)
(define g front.graph)

(define WIDTH 0)
(define HEIGHT 0)
(define (setWindowSize)
	(set! WIDTH (- window.innerWidth 5))
    (set! HEIGHT (- window.innerHeight 5))
    (send front setSize WIDTH HEIGHT)
    undefined) 
(setWindowSize)
(on window:resize (setWindowSize.bind window))


(class (Shape width height pattern)
	(set! this.img (new Surface width height))
	(for (var k in pattern)
		(define parts (k.split " "))
		(define color (parts.pop))
		(define height parts[0])
		(set! height (parseInt (height.substring 0 (- height.length 2)) 10))
		(define font (parts.join " "))
        (set! this.img.graph.font font)
        (set! this.img.graph.fillStyle color)
		(set! parts (pattern[k].split "\n"))
        (for (var i in parts)
            (define y (* height (+ 1 (parseInt i 10))))
			(this.img.graph.fillText parts[i] 0 y)))

    (method (draw x y)
        (g.drawImage this.img.canv (or x 0) (or y 0))))