(define brian (new Brian))
(define bubbles [])
(define plants null)

(define (makePlants i)
    (set! plants [])
    (while (> i 0)
        (plants.push (new Plant (+ 5 (rand 15))))
        (set! i (- i  1)))
    undefined)

(makePlants 40)

(define G 0.00005)

(define lt (time))
(define BAND_SIZE 20)
(setInterval (lambda ()
    (define t (time))
    (define dt (- t lt))
    (set! lt t)
    (define y 0)
    (define b 127)

    (define s (/ (* BAND_SIZE b) MID_HEIGHT))
    (while (< y MID_HEIGHT)
        (set! g.fillStyle (rgba 0 0 (Math.floor b) 1))
        (g.fillRect 0 y WIDTH BAND_SIZE)
        (set! y (+ BAND_SIZE y))
        (set! b (- b s)))
    (set! g.fillStyle (rgba 0 0 0 1))
    (g.fillRect 0 MID_HEIGHT WIDTH MID_HEIGHT)
    (set! bubbles (bubbles.concat (brian.update dt)))
    (brian.draw)
    (for (var i in bubbles)
        (bubbles[i].update dt)
        (bubbles[i].draw))
    (set! bubbles (bubbles.filter (lambda (b) (> b.y 0))))
    (for (var i in plants)
        (plants[i].update dt)
        (plants[i].draw (* i 25) HEIGHT))
    undefined) 1)

(define (moveHoriz ddx)
    (set! brian.dx (+ brian.dx ddx)))

(define (moveLeft)
    (moveHoriz -0.1))

(define (moveRight)
    (moveHoriz 0.1))

(define (moveVert ddy)
    (set! brian.dy (+ brian.dy ddy)))

(define (moveUp)
    (moveVert -0.1))

(define (moveDown)
    (moveVert 0.1))

(define (movePoint x y)
    (if (< x brian.x)
        (moveLeft)
        (moveRight))
    (if (< y brian.y)
        (moveUp)
        (moveDown)))

(on window:keydown (lambda (evt)
    (if (or (= evt.keyCode UP)
            (= evt.keyCode W_KEY))
        (moveUp)
        (when (or (= evt.keyCode DOWN)
                  (= evt.keyCode S_KEY))
            (moveDown)))

    (if (or (= evt.keyCode LEFT)
            (= evt.keyCode A_KEY))
        (moveLeft)
        (when (or (= evt.keyCode RIGHT)
                  (= evt.keyCode D_KEY))
            (moveRight)))

    (when (not (or (and evt.ctrlKey (= evt.keyCode R_KEY))
                   (= evt.keyCode ALT)))
        (evt.preventDefault))
        undefined))

(if (in "touchstart" window)
    (on window:touchstart (lambda (evt)
        (define touches (Array.prototype.slice.call evt.changedTouches))
        (while (> touches.length 0)
            (define touch (touches.pop))
            (define x touch.clientX)
            (define y touch.clientY)
            (movePoint x y))
        (evt.preventDefault)
        undefined))
    (on window:mouseup (lambda (evt)
        (movePoint evt.clientX evt.clientY)
        undefined)))