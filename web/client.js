(define brian (new Fish 100 100))
(define bubbles [])
(define plants null)
(define fish null)

(define (makePlants i)
    (set! plants [])
    (while (> i 0)
        (plants.push (new Plant (rand WIDTH) HEIGHT (+ 5 (rand 15))))
        (set! i (- i  1)))
    undefined)

(makePlants 40)

(define (makeFish i)
    (set! fish [])
    (while (> i 0)
        (fish.push (new Fish (rand WIDTH) (rand HEIGHT)))
        (set! i (- i  1)))
    undefined)

(makeFish 20)

(define G 0.00005)

(define (boids arr dt)
    (define all (arr.concat brian))
    (arr.forEach (lambda (f)
        (define v1 (rule1 all f))
        (define v2 (rule2 all f))
        (define v3 (rule3 all f))
        (v1.iadd v2)
        (v1.iadd v3)
        (v1.idiv 10000)
        (f.spd.iadd v1)
        (f.update dt)
        undefined)))

(define MAX_DIST 100)

// steer torwards local center
(define (rule1 arr f)
    (define center (new Vector 0 0))
    (define count 0)
    (for (var i in arr)
        (define dir (arr[i].loc.sub f.loc))
        (define dist (dir.mag))
        (when (!= arr[i] f)
            (center.iadd arr[i].loc)
            (set! count (+ 1 count))))
    (when (> count 0)
        (center.idiv count)
        (center.isub f.loc))
    (center.div 4))

// steer away from local fish 
(define (rule2 arr f)
    (define center (new Vector 0 0))
    (define count 0)
    (for (var i in arr)
        (define dir (arr[i].loc.sub f.loc))
        (define dist (dir.mag))
        (when (and (!= arr[i] f) (< dist MAX_DIST))
            (center.iadd arr[i].loc)
            (set! count (+ 1 count))))
    (when (> count 0)
        (center.idiv count)
        (set! center (f.loc.sub center)))
    (center.mul 3))

// average direction
(define (rule3 arr f)
    (define center (new Vector 0 0))
    (define count 0)
    (for (var i in arr)
        (define dir (arr[i].loc.sub f.loc))
        (define dist (dir.mag))
        (when (and (!= arr[i] f) (< dist MAX_DIST))
            (center.iadd arr[i].spd)
            (set! count (+ 1 count))))
    (when (> count 0)
        (center.idiv count))
    (center.div 2))

(define (clrscrn)
    (define y 0)
    (define b 127)
    (define s (/ (* BAND_SIZE b) MID_HEIGHT))
    (while (< y MID_HEIGHT)
        (set! g.fillStyle (rgba 0 0 (Math.floor b) 1))
        (g.fillRect 0 y WIDTH BAND_SIZE)
        (set! y (+ BAND_SIZE y))
        (set! b (- b s)))
    (set! g.fillStyle (rgba 0 0 0 1))
    (g.fillRect 0 MID_HEIGHT WIDTH MID_HEIGHT))

(define lt (time))
(define BAND_SIZE 20)
(setInterval (lambda ()
    (define t (time))
    (define dt (- t lt))
    (set! lt t)
    
    (clrscrn)
    (boids fish dt)
    (set! bubbles (bubbles.concat (brian.update dt)))
    (brian.draw)
    (fish.forEach (lambda (obj) (obj.draw)))
    ((bubbles.concat plants).forEach (lambda (obj)
        (obj.update dt)
        (obj.draw)))

    (set! bubbles (bubbles.filter (lambda (b) (> b.loc.y 0))))
    undefined) 1)

(define (move ddx ddy)
    (set! brian.spd (brian.spd.add (new Vector ddx ddy))))

(define (moveLeft)
    (move -0.1 0))

(define (moveRight)
    (move 0.1 0))

(define (moveUp)
    (move 0 -0.1))

(define (moveDown)
    (move 0 0.1))

(define (movePoint x y)
    (if (< x brian.loc.x)
        (moveLeft)
        (moveRight))
    (if (< y brian.loc.y)
        (moveUp)
        (moveDown)))

(on window:keydown (lambda (evt)
    (if (or (= evt.keyCode UP)
            (= evt.keyCode W_KEY))
        (moveUp)
        (when (or (= evt.keyCode DOWN)
                  (= evt.keyCode S_KEY))
            (moveDown)))

    (if (or (= evt.keyCode LEFT)
            (= evt.keyCode A_KEY))
        (moveLeft)
        (when (or (= evt.keyCode RIGHT)
                  (= evt.keyCode D_KEY))
            (moveRight)))

    (when (not (or evt.ctrlKey (= evt.keyCode ALT)))
        (evt.preventDefault))
        undefined))

(if (in "touchstart" window)
    (on window:touchstart (lambda (evt)
        (define touches (Array.prototype.slice.call evt.changedTouches))
        (while (> touches.length 0)
            (define touch (touches.pop))
            (define x touch.clientX)
            (define y touch.clientY)
            (movePoint x y))
        (evt.preventDefault)
        undefined))
    (on window:mouseup (lambda (evt)
        (movePoint evt.clientX evt.clientY)
        undefined)))